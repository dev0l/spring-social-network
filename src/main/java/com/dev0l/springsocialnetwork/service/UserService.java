package com.dev0l.springsocialnetwork.service;

import com.dev0l.springsocialnetwork.entity.User;
import com.dev0l.springsocialnetwork.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.xml.bind.DatatypeConverter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.List;

@Service
public class UserService {

  @Autowired
  private UserRepository userRepository;

  public List<User> getAllUsers() {
    return userRepository.findAll();
  }

  public User findUserById(long id) {
    return userRepository.findById(id).orElseThrow();
  }

  public User findUserByUsername(String username) {
    return userRepository.findByUsername(username);
  }

  //Used to update fields of a given database entry
  public void updateUser(User user) {
    //User is queried from the database by using its id field => user.getId();
    User userDB = userRepository.findById(user.getId()).orElseThrow();
    //Object returned from database is updated
    //name field updated
    userDB.setUsername(user.getUsername());
    //address field updated
    userDB.setAddress(user.getAddress());
    //Notice that the object which was queried from database and
    //subsequently updated is the one that is saved.
    userRepository.save(userDB);
  }

  public void saveUser(User user) {
    //Calls method with name generateSalt() => returns byte array (byte[])
    byte[] salt = generateSalt();
    //salt value returned by generateSalt() above is converted into String
    //in order to be saved in database
    String saltString = convertByteToStringForDB(salt);
    //Calls createSecureHashPass() with the parameter plainTextPassword
    //received from user (user.getPassword())
    //and the byte array generated by generateSalt() above
    //returns String created of the hash function.
    String hashedPassword = createSecureHashPass(user.getPassword(), salt);

    //checks if password isn't an empty String
    //if the String is not empty it we set the salt and the password
    //and we proceed to save the user that's just been created
    if (!hashedPassword.equals("")) {
      user.setSalt(saltString);
      user.setPassword(hashedPassword);
      userRepository.save(user);
    }
  }

  //Creates secure hash and returns it converted into a String in
  //order to save it in database
  public String createSecureHashPass(String plainTextPassword, byte[] salt) {
    try {
      MessageDigest md = MessageDigest.getInstance("SHA-256");
      md.update(salt);
      byte[] hashedPass = md.digest(plainTextPassword.getBytes());
      return convertByteToStringForDB(hashedPass);

    } catch (NoSuchAlgorithmException ex) {
      ex.printStackTrace();
    }
    return "";
  }

  //Converts byte[] to String
  private String convertByteToStringForDB(byte[] hashedPass) {
    return DatatypeConverter.printHexBinary(hashedPass).toLowerCase();
  }

  //Converts String to byte[]
  private byte[] convertStringToByteForDB(String dbPassword) {
    return DatatypeConverter.parseHexBinary(dbPassword);
  }

  //Uses class SecureRandom in order to generate a byte[] of random values
  private byte[] generateSalt() {
    SecureRandom sr = new SecureRandom();
    byte[] hashedSalt = sr.generateSeed(12);
    return hashedSalt;
  }

  //Authenticating user based on Hashing
  public boolean authUser(String username, String password) {
    User dbUser = userRepository.findByUsername(username);
    if (dbUser == null) {
      System.out.println("Username is not correct " + username);
      return false;
    }
    String passwordToCompare = createSecureHashPass(password, convertStringToByteForDB(dbUser.getSalt()));
    return dbUser.getPassword().equals(passwordToCompare);
  }

  public void deleteUser(long id) {
    userRepository.deleteById(id);
  }
}
